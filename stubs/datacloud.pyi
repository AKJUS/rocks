"""
This type stub file was generated by pyright.
"""

import pandas as pd
import pydantic
from typing import List, Optional

"""Implement the Datacloud catalogue pydantic models."""
CATALOGUES = ...

def pretty_print(rock, catalogue, parameter):
    """Print datacloud catalogue using a nice table format.

    Parameters
    ==========
    rock : rocks.Rock
        The Rock instance the catalogue is associated to.
    catalogue : pd.DataFrame
        The datacloud catalogue to print.
    parameter : str
        The name of the user-requested parameter to echo.
    """
    ...

class DataCloudDataFrame(pd.DataFrame):
    def plot(self, parameter, **kwargs):  # -> None:
        """Plot the parameter of the catalogue."""
        ...
    def weighted_average(
        self, parameter
    ):  # -> tuple[float, float] | tuple[Any, Any] | tuple[Unknown, Any]:
        """Compute the weighted average of the parameter using the preferred
        values only."""
        ...

class DataCloudSeries(pd.Series): ...

def ensure_list(value):  # -> list[dict[Unknown, Unknown] | int | float | str]:
    """Ensure that parameters are always a list.

    Further replaces all None values by empty dictionaries.
    """
    ...

def ensure_int(value): ...

class Catalogue(pydantic.BaseModel):
    """The abstraction of a general datacloud catalogue on SsODNet."""

    id_: List[int] = ...
    link: List[str] = ...
    name: List[str] = ...
    title: List[str] = ...
    number: List[Optional[int]] = ...
    iddataset: List[str] = ...
    datasetname: List[str] = ...
    idcollection: List[int] = ...
    resourcename: List[str] = ...
    _ensure_list: classmethod = ...
    _ensure_int: classmethod = ...

class AstDyS(Catalogue):
    H: List[float] = ...
    ProperSemimajorAxis: List[float] = ...
    err_ProperSemimajorAxis: List[float] = ...
    ProperEccentricity: List[float] = ...
    err_ProperEccentricity: List[float] = ...
    ProperSinI: List[float] = ...
    err_ProperSinI: List[float] = ...
    ProperInclination: List[float] = ...
    err_ProperInclination: List[float] = ...
    n: List[float] = ...
    err_n: List[float] = ...
    g: List[float] = ...
    err_g: List[float] = ...
    s: List[float] = ...
    err_s: List[float] = ...
    LCE: List[float] = ...
    My: List[float] = ...
    lam_fit: List[float] = ...

class Astorb(Catalogue):
    OrbComputer: List[str] = ...
    H: List[float] = ...
    G: List[float] = ...
    B_V: List[float] = ...
    IRAS_Diameter: List[float] = ...
    IRAS_Class: List[str] = ...
    OrbArc: List[int] = ...
    NumberObs: List[int] = ...
    MeanAnomaly: List[float] = ...
    ArgPerihelion: List[float] = ...
    LongAscNode: List[float] = ...
    Inclination: List[float] = ...
    Eccentricity: List[float] = ...
    SemimajorAxis: List[float] = ...
    CEU_value: List[float] = ...
    CEU_rate: List[float] = ...
    PEU_value: List[float] = ...
    GPEU_fromCEU: List[float] = ...
    GPEU_fromPEU: List[float] = ...
    Note_1: List[int] = ...
    Note_2: List[int] = ...
    Note_3: List[int] = ...
    Note_4: List[int] = ...
    Note_5: List[int] = ...
    Note_6: List[int] = ...
    YY_calulation: List[int] = ...
    MM_calulation: List[int] = ...
    DD_calulation: List[int] = ...
    YY_osc: List[int] = ...
    MM_osc: List[int] = ...
    DD_osc: List[int] = ...
    CEU_yy: List[int] = ...
    CEU_mm: List[int] = ...
    CEU_dd: List[int] = ...
    PEU_yy: List[int] = ...
    PEU_mm: List[int] = ...
    PEU_dd: List[int] = ...
    GPEU_yy: List[int] = ...
    GPEU_mm: List[int] = ...
    GPEU_dd: List[int] = ...
    GGPEU_yy: List[int] = ...
    GGPEU_mm: List[int] = ...
    GGPEU_dd: List[int] = ...
    JD_osc: List[float] = ...
    px: List[float] = ...
    py: List[float] = ...
    pz: List[float] = ...
    vx: List[float] = ...
    vy: List[float] = ...
    vz: List[float] = ...
    MeanMotion: List[float] = ...
    OrbPeriod: List[float] = ...

class Binarymp(Catalogue): ...
class Colors(Catalogue): ...

class Diamalbedo(Catalogue):
    doi: List[str] = ...
    url: List[str] = ...
    title: List[str] = ...
    method: List[str] = ...
    year: List[Optional[int]] = ...
    source: List[str] = ...
    shortbib: List[str] = ...
    albedo: List[float] = ...
    err_albedo: List[float] = ...
    diameter: List[float] = ...
    err_diameter: List[float] = ...
    beaming: List[float] = ...
    err_beaming: List[float] = ...
    emissivity: List[float] = ...
    err_emissivity: List[float] = ...
    preferred_albedo: List[bool] = ...
    preferred_diameter: List[bool] = ...
    preferred: List[bool] = ...
    @pydantic.validator("preferred_albedo", pre=True)
    def select_preferred_albedo(cls, _, values): ...
    @pydantic.validator("preferred_diameter", pre=True)
    def select_preferred_diameter(cls, _, values): ...
    @pydantic.validator("preferred", pre=True)
    def preferred_albedo_or_diameter(cls, _, values): ...

class Families(Catalogue):
    membership: List[float] = ...
    family_name: List[str] = ...
    family_number: List[float] = ...
    family_status: List[str] = ...

class Masses(Catalogue):
    doi: List[str] = ...
    url: List[str] = ...
    source: List[str] = ...
    method: List[str] = ...
    shortbib: List[str] = ...
    year: List[Optional[int]] = ...
    mass: List[float] = ...
    err_mass: List[float] = ...
    preferred: List[bool] = ...
    @pydantic.validator("preferred", pre=True)
    def select_preferred_mass(cls, _, values): ...

class Mpcatobs(Catalogue):
    link: List[str] = ...
    datasetname: List[str] = ...
    resourcename: List[str] = ...
    title: List[str] = ...
    iddataset: List[str] = ...
    idcollection: List[Optional[int]] = ...
    jd_obs: List[float] = ...
    ra_obs: List[float] = ...
    dec_obs: List[float] = ...
    mag: List[float] = ...
    vgs_x: List[float] = ...
    vgs_y: List[float] = ...
    vgs_z: List[float] = ...
    packed_name: List[str] = ...
    orb_type: List[str] = ...
    discovery: List[str] = ...
    note1: List[str] = ...
    note2: List[str] = ...
    note3: List[str] = ...
    note4: List[str] = ...
    iau_code: List[str] = ...
    date_obs: List[str] = ...
    filter_: List[str] = ...
    type_: List[str] = ...

class Mpcorb(Catalogue): ...

class Pairs(Catalogue):
    sibling_num: List[float] = ...
    sibling_name: List[str] = ...
    delta_v: List[float] = ...
    delta_a: List[float] = ...
    delta_e: List[float] = ...
    delta_sini: List[float] = ...
    delta_i: List[float] = ...
    membership: List[int] = ...

class PhaseFunction(Catalogue): ...

class Taxonomies(Catalogue):
    doi: List[str] = ...
    source: List[str] = ...
    waverange: List[str] = ...
    method: List[str] = ...
    scheme: List[str] = ...
    complex_: List[str] = ...
    class_: List[str] = ...
    shortbib: List[str] = ...
    year: List[Optional[int]] = ...
    preferred: List[bool] = ...
    @pydantic.validator("preferred", pre=True)
    def select_preferred_taxonomy(cls, _, values): ...

class ThermalProperties(Catalogue): ...
class Yarkovskies(Catalogue): ...
