``rocks``
=========
*for space rocks*

A ``python`` package to query and explore asteroid data from
`SsODNet <https://ssp.imcce.fr/webservices/ssodnet/>`_.

**Disclaimer: The SsODNet service and its database are in an alpha version and
under constant revision. The provided values and access methods may change
without notice.**

``rocks`` allows to

- :ref:`resolve asteroid names from various identification formats<Asteroid name resolution>`
- :ref:`explore available asteroid data via the command line<Exploration via the command line>`
- :ref:`retrieve and compare measurements in a script<Retrieve and compare asteroid data in a script>`
- :ref:`retrieve parameters for thousands of asteroids in a batch-job<Retrieve parameters for a large number of asteroids>`

Asteroid name resolution
""""""""""""""""""""""""
``rocks`` can identify asteroids based on a variety of identifying strings or
numbers.

.. code-block:: python

   from rocks import names
   from rocks import properties

   # A collection of asteroid identifiers
   ssos = [4, 'eos', '1992EA4', 'SCHWARTZ', '1950 RW', '2001je2']

   # Resolve their names and numbers
   names_numbers = names.get_name_number(ssos)
   names = [nn[0] for nn in names_numbers]

   print(names_numbers)
   # [('Vesta', 4), ('Eos', 221), ('1992 EA4', 30863), ('Schwartz', 13820),
   #  ('Gyldenkerne', 5030), ('2001 JE2', 131353)]

The name resolution algorithm and different use cases are :ref:`documented here<Resolving names, numbers, designations>`.


Exploration via the command line
""""""""""""""""""""""""""""""""
The ``rocks`` executable is installed system-wide upon installation of the
package.

.. code-block:: bash

   $ rocks identify 221
   (221) Eos

   $ rocks taxonomy Eos
   ref                  class scheme     method  waverange
   Tholen+1989          S     Tholen     Phot    VIS        [ ]
   Bus&Binzel+2002      K     Bus        Spec    VIS        [ ]
   MotheDiniz+2005      K     Bus        Spec    VIS        [ ]
   MotheDiniz+2008a     K     Bus        Spec    VISNIR     [ ]
   Clark+2009           K     Bus-DeMeo  Spec    VISNIR     [ ]
   DeMeo+2009           K     Bus-DeMeo  Spec    VISNIR     [X]

   $ rocks albedo Eos
   ref                  albedo err   method
   Morrison+2007        0.123  0.025 STM      [ ]
   Tedesco+2001         0.140  0.010 STM      [ ]
   Ryan+2010            0.150  0.012 STM      [ ]
   Ryan+2010            0.121  0.019 NEATM    [X]
   Usui+2011            0.131  0.014 NEATM    [X]
   Masiero+2011         0.165  0.038 NEATM    [X]
   Masiero+2012         0.166  0.021 NEATM    [X]
   Masiero+2014         0.180  0.027 NEATM    [X]
   Nugent+2016          0.140  0.091 NEATM    [X]
   Nugent+2016          0.150  0.171 NEATM    [X]
   
         0.147 +- 0.004

   $ rocks info Eos | grep ProperSemimajor
          "ProperSemimajorAxis": "3.0123876",
          "err_ProperSemimajorAxis": "0.00001553",

See ``rocks --help`` and :ref:`the documentation<Command-Line Interface>` for the implemented functions.

Retrieve and compare asteroid data in a script
""""""""""""""""""""""""""""""""""""""""""""""
At the core of the ``rocks`` package is the ``Rock`` class. A ``Rock`` instance represents an asteroid. Its properties are accessible via its attributes.

.. code-block:: python

  from rocks.core import Rock

  Ceres = Rock(1)
  print(Ceres)
  # Rock(number=1, name='Ceres')

  Vesta = Rock('vesta')
  print(Vesta)
  # Rock(number=4, name='Vesta') 

  print(Ceres.taxonomy)  # singular form: from ssoCard
  # 'C'
  print(Ceres.taxonomies)  # plurar form: all datacloud entries
  # ['G', 'C', 'C', 'C', 'C', 'G', 'C']

  print(Vesta.albedo)
  # 0.3447431141599281

  print(Vesta.albedo > Ceres.albedo)
  # True

The properties metadata and uncertainties are again attributes of the property
itself.

.. code-block:: python

  print(Ceres.taxonomies)
  # ['G', 'C', 'C', 'C', 'C', 'G', 'C']
  print(Ceres.taxonomies.shortbib)
  # ['Tholen+1989', 'Bus&Binzel+2002', 'Lazzaro+2004', 'Lazzaro+2004', 'DeMeo+2009', 'Fornasier+2014', 'Fornasier+2014']
  print(Ceres.taxonomies.method)
  # ['Phot', 'Spec', 'Spec', 'Spec', 'Spec', 'Spec', 'Spec']

See the ``Rock`` :ref:`class documentation<rock_class>` for details.

Retrieve parameters for a large number of asteroids
"""""""""""""""""""""""""""""""""""""""""""""""""""

.. code-block:: python

   from rocks import names
   from rocks import properties

   # A collection of asteroid identifiers
   ssos = [4, 'eos', '1992EA4', 'SCHWARTZ', '1950 RW', '2001je2']

   # Resolve their names and numbers
   names_numbers = names.get_name_number(ssos)
   names = [nn[0] for nn in names_numbers]

   print(names_numbers)
   # [('Vesta', 4), ('Eos', 221), ('1992 EA4', 30863), ('Schwartz', 13820),
   #  ('Gyldenkerne', 5030), ('2001 JE2', 131353)]

   # Get their taxonomy
   taxa = properties.get_property('taxonomy', names, verbose=True, skip_quaero=True)
   classes = [t[0] for t in taxa]

   print(list(zip(names, classes)))
   # [('Vesta', 'V'), ('Eos', 'K'), ('1992 EA4', 'Ds'), ('Schwartz', 'B'),
   #  ('Gyldenkerne', False), ('2001 JE2', 'CX')]

And more
""""""""

.. toctree::
   :maxdepth: 1

   core
   names
   cli
   properties
   tools
